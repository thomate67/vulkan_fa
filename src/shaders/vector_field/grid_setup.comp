#version 450
#extension GL_ARB_separate_shader_objects : enable

layout (local_size_x = 128) in;

struct flock_member
{
    vec3 position;
    vec3 velocity;
    vec4 color;
};

struct Uniform_grid_params
{
    vec4 grid_min;
    ivec4 cell_count;
    vec4 cell_size;
    vec4 grid_pos;
    int total_cell_count;
    int cell_capacity;
    int grid_capacity;
};

layout (std430, binding = 0) readonly buffer members_in
{
    flock_member member[];
} input_data;

layout (std430, binding = 1) buffer members_out
{
    flock_member member[];
} output_data;

layout (std430, binding = 2) buffer grid_parameters
{
    Uniform_grid_params grid_params;
};

layout (std430, binding = 4) buffer grid_buffer
{
    int grid[];
};

layout (std430, binding = 5) buffer cell_counter_buffer
{
    int cell_counter[];
};

void main() 
{
    int global_id = int(gl_GlobalInvocationID.x);

    if(global_id >= input_data.member.length())
    {
        return;
    }

    flock_member particle = input_data.member[global_id];

    vec4 pos = vec4(particle.position, 0.0f);
    int i = int((pos.x - grid_params.grid_min.x) / grid_params.cell_size.x);
    int j = int((pos.y - grid_params.grid_min.y) / grid_params.cell_size.y);
    int k = int((pos.z - grid_params.grid_min.z) / grid_params.cell_size.z);
    int cell_index = i * grid_params.cell_count.y * grid_params.cell_count.z
                     + j * grid_params.cell_count.z + k;
    if (cell_index < grid_params.total_cell_count) 
    {
        int particles_in_cell = atomicAdd(cell_counter[cell_index], 1);
        int grid_index = cell_index * grid_params.cell_capacity + particles_in_cell;
        if (grid_index < grid_params.grid_capacity) 
        {
            grid[grid_index] = int(global_id);
        }
        //particle.color = vec4(i/float(grid_params.cell_count.x), (j)/float(grid_params.cell_count.y), k/float(grid_params.cell_count.z), 0.0f);
    }

}