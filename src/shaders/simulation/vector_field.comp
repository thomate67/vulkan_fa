#version 450
#extension GL_ARB_separate_shader_objects : enable

layout (local_size_x = 128) in;

struct Uniform_grid_params
{
    vec4 grid_min;
    ivec4 cell_count;
    vec4 cell_size;
    vec4 grid_pos;
    int total_cell_count;
    int cell_capacity;
    int grid_capacity;
};

struct VectorField
{
	vec4 pos;
	vec4 vector;
};

struct VectorRods
{
    vec4 position;
    vec4 velocity;
};

layout (std430, binding = 2) buffer grid_parameters
{
    Uniform_grid_params grid_params;
};

layout (binding = 3) uniform UBO 
{
	vec3 goal;
} ubo;


layout (std430, binding = 6) buffer vector_field_buffer
{
    VectorField vector_field[];
};

layout (std430, binding = 10) buffer vector_rods_buffer
{
    VectorRods vector_rods[];
};

vec3 getVelocity(vec3 p)        //das ganze in einen eigenen Compute Shader
{
    vec3 v = vec3(0., 0., 0.);

    //circle
    v.x = p.y;
    v.y = -p.x;
    v.z = -p.z;

    //Viereck
    /*v.x = -2.0 * mod(floor(p.y), 2.0) + 1.0;
      v.y = -2.0 * mod(floor(p.x), 2.0) + 1.0;
      v.z = 0.0;*/
    //rain
    /*v.x = cos(p.x)*p.x;
    v.y = p.y;*/
    //crazy waves
    /*v.x = cos(p.y);
    v.y = cos(length(p));*/

    //whatever
    /*v.x = sin((p.x-(length(p)-p.x)));
    v.y = cos((p.x+p.y));*/

    return v;
}

void main(void)
{
    int global_id = int(gl_GlobalInvocationID.x);

    if(global_id >= grid_params.total_cell_count)
    {
        return;
    }

    VectorRods rod = vector_rods[global_id];

    

    vec3 p = vector_field[global_id].pos.xyz;
    vec3 velocity = vec3(0.0f);

    velocity = getVelocity(p);

    vector_field[global_id].vector = vec4(velocity, 0.0f);
    rod.velocity = vector_field[global_id].vector;

    //rod.velocity = vec4(ubo.goal, 0.0f);  //for visualization purposes

    vector_rods[global_id] = rod;
}