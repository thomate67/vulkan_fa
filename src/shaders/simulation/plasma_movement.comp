#version 450
#extension GL_ARB_separate_shader_objects : enable

layout (local_size_x = 128) in;

struct Plasma
{
    vec4 pos;
	vec4 vel;
    vec4 color;
	float lifetime;
    float max_lifetime;
	int hit_counter;
};

struct Atom
{
	vec4 pos;
	vec4 vel;
	vec4 color;
	int type;
    int is_excited;
    int is_dead;
    float lifetime;
    float max_lifetime;
};

struct Uniform_grid_params
{
    vec4 grid_min;
    ivec4 cell_count;
    vec4 cell_size;
    vec4 grid_pos;
    int total_cell_count;
    int cell_capacity;
    int grid_capacity;
};

struct VectorField
{
	vec4 pos;
	vec4 vector;
};

layout (binding = 3) uniform UBO 
{
	vec3 goal;
} ubo;

layout (binding = 9) uniform UVariables 
{
	float delta_time;
    float theta;
} variables;

layout (std430, binding = 0) buffer plasma_buffer
{
    Plasma particles[];
};

layout (std430, binding = 1) buffer atoms_buffer
{
   Atom atoms[];
};

layout (std430, binding = 2) buffer grid_parameters
{
    Uniform_grid_params grid_params;
};

layout (std430, binding = 4) buffer grid_buffer
{
    int grid[];
};

layout (std430, binding = 5) buffer cell_counter_buffer
{
    int cell_counter[];
};

layout (std430, binding = 6) buffer vector_field_buffer
{
    VectorField vector_field[];
};

void main(void)
{
    //uint i, j;
    int global_id = int(gl_GlobalInvocationID.x);
    int local_id  = int(gl_LocalInvocationID.x);

    if(global_id >= atoms.length())
    {
        return;
    }

    Plasma particle = particles[global_id];
    
    Atom atom = atoms[global_id];

    //particle.color = vec4(sin(variables.theta) * 0.2f, sin(variables.theta) * 0.3f, sin(variables.theta) * 0.5f, 0.0f);

    //atom.color = vec4(1.0f, 1.0f, 1.0f, 0.0f);

    particles[global_id] = particle;

    atoms[global_id] = atom;
}